[[stack_child]]
is available_area determined by bounds? what about overflow, does it become negative?
    Is this (negative available_area) taken into account in the shrink_area_to_fit_when_unbounded, or somewhere else?
why is cross-axis size never updated for available_area?
    will that change if cross-axis size can change due to flex-wrap

[[align_position]]
what does AlignAxis mean/do?
what size is all_gaps_sizes exactly referring to?
why is it dependant on initial_available_area?
flex container can have multiple rows/columns, not all with the same amount of elements.
    Does that affect calculation of gap_size (every variant)?

[[align_content]]
what does AlignAxis mean/do?
flex container can have multiple rows/columns, not all with the same amount of elements.
    Does that affect calculation of the new origin points?

[[observation]]
normally, a node mainly grows with the amount of items in the main-axis, and the amount of items does not change the cross-axis.
    A flex-wrap node grows with the amount of items in both the main-axis and the cross-axis. This might change all of the above code-paths.


üîç [[stack_child]]
Q1: Is available_area determined by bounds? What about overflow ‚Äî does it become negative?

A:
Yes, available_area is initially determined by the bounds of the parent node's layout area (i.e., inner_area), which is a subset of the parent_area. As children are stacked, available_area.size is reduced accordingly by each child's size plus spacing.

Overflow can happen ‚Äî particularly when the sum of the children's sizes exceeds the available space. In that case, available_area.size.width or .height can become negative.

However, the current code does not explicitly prevent or clamp negative values in available_area. This might be intentional to allow subsequent logic (e.g., flex wrap, scroll containers, or overflow detection) to handle it. But it is not accounted for in shrink_area_to_fit_when_unbounded, which assumes sizes are valid and non-negative.
Q2: Is this (negative available_area) taken into account in shrink_area_to_fit_when_unbounded, or somewhere else?

A:
No, not in shrink_area_to_fit_when_unbounded. That function assumes available_area.size is a valid, non-negative value when assigning it from parent_area.size - padding - margin. If available_area went negative earlier due to stacking too many children, this isn't corrected here.

If you expect overflows (like with many children, or flexible layouts), additional validation or clamping logic might be necessary elsewhere in the pipeline.
Q3: Why is cross-axis size never updated for available_area?

A:
Because most layout strategies assume the cross-axis is fixed or defined by the parent node (e.g. fixed width for a vertical layout). It‚Äôs common in layout engines to adjust available_area only along the main axis during stacking ‚Äî the cross-axis remains constant unless specifically recomputed.

This also aligns with flexbox logic, where the main-axis is where items are "stacked", and the cross-axis alignment is handled separately (via alignment or stretching).
Q4: Will that change if cross-axis size can change due to flex-wrap?

A:
Yes, it should. If you introduce support for flex-wrap, the cross-axis will dynamically grow depending on how many lines (rows or columns) are formed. In that case, available_area.size in the cross-axis must be recalculated after wrapping logic has determined how many rows/columns exist.

This would likely require:

    Tracking cumulative cross-axis size during stacking

    Wrapping children into new lines

    Updating available_area.size in both axes accordingly

Currently, this is not implemented in the given code, which means flex-wrap is not fully supported.
üîç [[align_position]]
Q1: What does AlignAxis mean/do?

A:
AlignAxis is an enum-like utility that resolves to either Height or Width depending on:

    The node‚Äôs Direction (Vertical/Horizontal)

    The alignment direction: Main or Cross

This abstraction allows unified logic when aligning on either axis, without repeating code for both width/height.
Q2: What size is all_gaps_sizes exactly referring to?

A:
all_gaps_sizes is the leftover space in the main axis after laying out the content:

let all_gaps_sizes = initial_available_area.height() - inner_sizes.height;

This measures how much space is available for spacing (gaps) between children. It's used to compute uniform gap sizes in SpaceBetween, SpaceEvenly, and SpaceAround.
Q3: Why is it dependent on initial_available_area?

A:
Because spacing must be computed before any final layout offsets are applied.
Using initial_available_area ensures you calculate spacing based on the unmodified layout bounds, rather than after shifting children.

This is correct ‚Äî it ensures spacing is consistent, even if the final positions are offset due to alignment logic.
Q4: Flex container can have multiple rows/columns, not all with the same amount of elements. Does that affect calculation of gap_size (every variant)?

A:
Yes ‚Äî and this is a limitation of the current implementation.

The gap_size logic assumes one line of items. It evenly distributes gaps between all siblings in that line. However, with flex-wrap:

    There may be multiple lines (rows/columns)

    Each line might have a different number of items

    Gaps should be calculated per line, not globally

So in a flex-wrap scenario, the current spacing logic would be incorrect. You‚Äôd need to:

    Group children into lines based on wrapping

    Calculate gap_size within each line

    Align and space each line independently

This is a significant change and requires restructuring of layout grouping.
üîç [[align_content]]
Q1: What does AlignAxis mean/do?

Same as above:
It abstracts axis-specific logic for alignment. Based on node direction and alignment type (main/cross), it tells the engine whether to operate on width/x or height/y.
Q2: Flex container can have multiple rows/columns, not all with the same amount of elements. Does that affect calculation of the new origin points?

A:
Yes, and this is not handled in the current implementation.

The origin point logic in align_content assumes all children are in a single line. In a flex-wrap scenario:

    You‚Äôd need to align each line within the cross-axis bounds

    Each line‚Äôs children might need separate main-axis alignment

    Cross-axis origin might need to shift per line

So yes ‚Äî this logic would need to be extended to consider multi-line alignment, both in content alignment (align-content) and per-item alignment (align-items).
üîç [[observation]]

    Normally, a node mainly grows with the amount of items in the main-axis, and the amount of items does not change the cross-axis.
    A flex-wrap node grows with the amount of items in both the main-axis and the cross-axis. This might change all of the above code-paths.

You're absolutely correct.
This highlights a major design consideration:

    Current code assumes single-line stacking (main-axis only)

    available_area and layout sizing do not account for multi-line stacking or growing in cross-axis

    To support flex-wrap, several core pieces would need to be rewritten:

        measure_children logic

        Grouping children into lines

        Computing cross-axis growth

        Aligning both per-line and total cross-axis size

So yes ‚Äî enabling full flex-wrap behavior would significantly impact:

    Stacking logic (stack_child)

    Available size calculations

    Alignment logic in both axes